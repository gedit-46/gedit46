---------------------------------------1-------------------------------------

#include <stdio.h>
#include <stdlib.h>
const int MAXNODES = 10;
const int INF = 9999;
typedef struct{
int u, v, cost;
}edge;
int fnFindParent(int v, int parent[]);
void fnUnion_ij(int i, int j, int parent[]);
void fnInputGraph(int m, edge e[]);
int fnGetMinEdge(edge e[], int n);
void fnKruskal(int n, edge e[], int m);
int main( int argc, char **argv){
int n = 6, m = 20;
edge e[2*MAXNODES]; //sample graph
{{0,1,6},{1,4,4},{4,5,6},{5,3,2},{3,0,5},{0,2,1},{1,2,5},{3,2,2},{4,2,6},{5,2,3} };
printf("Enter the number of nodes : ");
scanf("%d", &n);
printf("Enter the number of edges : ");
scanf("%d", &m);
fnInputGraph(m, e);
fnKruskal(n, e, m);
return 0;}
int fnFindParent(int v, int parent[]){
while (parent[v] != v)
v = parent[v];
return v;}
void fnUnion_ij(int i, int j, int parent[]){
if(i < j)
parent[j] = i;
else
parent[i] = j;}
void fnInputGraph(int m, edge e[]){
int i, j, k, cost;
for(k=0; k<m; k++){
printf("Enter edge and cost in the form u, v, w : \n");
scanf("%d%d%d", &i, &j, &cost);
e[k].u = i;
e[k].v = j;
e[k].cost = cost;}}
int fnGetMinEdge(edge e[], int n){
int i, small, pos;
small = INF;
pos = -1;
for(i=0; i<n; i++){
if(e[i].cost < small){
small = e[i].cost;
pos = i;}}
return pos;}
void fnKruskal(int n, edge e[], int m){
int i, j, count, k, sum, u, v, t[MAXNODES][2], pos;
int parent[MAXNODES];
count = 0;
k = 0;
sum = 0;
for(i=0; i<n; i++){
parent[i] = i;}
while(count != n-1){
pos = fnGetMinEdge(e,m);
if(pos == -1){
break;}
u = e[pos].u;
v = e[pos].v;
i = fnFindParent(u,parent);
j = fnFindParent(v,parent);
if(i != j){
t[k][0] = u;
t[k][1] = v;
k++;
count++;
sum += e[pos].cost;
fnUnion_ij(i, j, parent);}
e[pos].cost = INF;}
if(count == n-1){
printf("\nSpanning tree exists");
printf("\nThe Spanning tree is shown below\n");
for(i=0; i<n-1; i++)
printf("%d %d\n",t[i][0], t[i][1]);
printf("\nCost of the spanning tree : %d\n", sum);}
else
printf("\nThe spanning tree does not exist\n");}

---------------------------------------2---------------------------------------------

#include <stdio.h>
#include <stdlib.h>
const int MAXNODES = 10;
void fnPrims(int n, int cost[MAXNODES][MAXNODES]);
void fnGetMatrix(int n,int a[MAXNODES][MAXNODES]);
int main( int argc, char **argv){
int a[MAXNODES][MAXNODES];// sample graph = {{0, 3, 9999, 7, 9}, {3, 0, 4, 2,
9999}, {9999, 4, 0, 5, 6}, {7, 2, 5, 0, 4}, {9, 9999, 6, 4, 0}};
int n = 5;
printf("Enter the number of vertices : ");
scanf("%d", &n);
fnGetMatrix(n,a);
fnPrims(n,a);
return 0;}
void fnPrims(int n, int cost[MAXNODES][MAXNODES]){
int i, j, u, v, min;
int sum, k, t[MAXNODES][2], p[MAXNODES], d[MAXNODES], s[MAXNODES];
int source, count;
min = 9999;
source = 0;
for(i=0; i<n; i++){
for(j=0; j<n; j++){
if(cost[i][j] != 0 && cost[i][j] <= min){
min = cost[i][j];
source = i;}}}
for(i=0; i<n; i++){
d[i] = cost[source][i];
s[i] = 0;
p[i] = source;}
s[source] = 1;
sum = 0;
k = 0;
count = 0;
while (count != n-1){
min = 9999;
u = -1;
for(j=0; j<n; j++){
if(s[j] == 0){
if(d[j] <= min){
min = d[j];
u = j;}}}
t[k][0] = u;
t[k][1] = p[u];
k++;
count++;
sum += cost[u][p[u]];
s[u] = 1;
for(v=0; v<n; v++){
if(s[v]==0 && cost[u][v]<d[v]){
d[v] = cost[u][v];
p[v] = u;}}}
if(sum >= 9999)
printf("\nSpanning tree does not exist\n");
else{
printf("\nThe spanning tree exists and minimum cost spanning tree is \n");
for(i=0; i<k; i++)
printf("%d %d\n",t[i][1], t[i][0]);
printf("\nThe cost of the minimum cost spanning tree is %d\n", sum);}}
void fnGetMatrix(int n,int a[MAXNODES][MAXNODES]){
int i, j;
printf("Enter the Cost Adjacency Matrix\n");
for(i=0; i<n; i++)
for(j=0; j<n; j++)
scanf("%d", &a[i][j]);}

---------------------------------3a-------------------------------

#include<stdio.h>
#include<conio.h>
#define INF 999
int min(int a,int b){
return(a<b)?a:b;}
void floyd(int p[][10],int n){
int i,j,k;
for(k=1;k<=n;k++)
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
p[i][j]=min(p[i][j],p[i][k]+p[k][j]);}
void main(){
int a[10][10],n,i,j;
clrscr();
printf("\nEnter the n value:");
scanf("%d",&n);
printf("\nEnter the graph data:\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&a[i][j]);
floyd(a,n);
printf("\nShortest path matrix\n");
for(i=1;i<=n;i++){
for(j=1;j<=n;j++)
printf("%d ",a[i][j]);
printf("\n");}
getch();}

------------------------------------------------3b----------------------------------

#include<stdio.h>
void warsh(int p[][10],int n){
int i,j,k;
for(k=1;k<=n;k++)
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
p[i][j]=p[i][j] || p[i][k] && p[k][j];}
int main(){
int a[10][10],n,i,j;
printf("\nEnter the n value:");
scanf("%d",&n);
printf("\nEnter the graph data:\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&a[i][j]);
warsh(a,n);
printf("\nResultant path matrix\n");
for(i=1;i<=n;i++){
for(j=1;j<=n;j++)
printf("%d ",a[i][j]);
printf("\n");}
return 0;}

----------------------------------4----------------------------

#include<stdio.h>
#define INF 999
void dijkstra(int c[10][10],int n,int s,int d[10]){
int v[10],min,u,i,j;
for(i=1;i<=n;i++){
d[i]=c[s][i];
v[i]=0;}
v[s]=1;
for(i=1;i<=n;i++){
min=INF;
for(j=1;j<=n;j++)
if(v[j]==0 && d[j]<min){
min=d[j];
u=j;}
v[u]=1;
for(j=1;j<=n;j++)
if(v[j]==0 && (d[u]+c[u][j])<d[j])
d[j]=d[u]+c[u][j];}}
int main(){
int c[10][10],d[10],i,j,s,sum,n;
printf("\nEnter n value:");
scanf("%d",&n);
printf("\nEnter the graph data:\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&c[i][j]);
printf("\nEnter the souce node:");
scanf("%d",&s);
dijkstra(c,n,s,d);
for(i=1;i<=n;i++)
printf("\nShortest distance from %d to %d is %d",s,i,d[i]);
 return 0;}

-------------------------------5-----------------------------

#include<stdio.h>
// #include<conio.h>
int temp[10],k=0;
void sort(int a[][10],int id[],int n){
int i,j;
for(i=1;i<=n;i++){
if(id[i]==0){
id[i]=-1;
temp[++k]=i;
for(j=1;j<=n;j++){
if(a[i][j]==1 && id[j]!=-1)
id[j]--;}
i=0;}}}
void main(){
int a[10][10],id[10],n,i,j;
// clrscr();
printf("\nEnter the n value:");
scanf("%d",&n);
for(i=1;i<=n;i++)
id[i]=0;
printf("\nEnter the graph data:\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++){
scanf("%d",&a[i][j]);
if(a[i][j]==1)
id[j]++;}
sort(a,id,n);
if(k!=n)
printf("\nTopological ordering not possible");
else{
printf("\nTopological ordering is:");
for(i=1;i<=k;i++)
printf("%d ",temp[i]);}
// getch();}

--------------------------------6--------------------------------

#include<stdio.h>
int w[10],p[10],n;
int max(int a,int b){
return a>b?a:b;}
int knap(int i,int m){
if(i==n) return w[i]>m?0:p[i];
if(w[i]>m) return knap(i+1,m);
return max(knap(i+1,m),knap(i+1,m-w[i])+p[i]);}
int main(){
int m,i,max_profit;
printf("\nEnter the no. of objects:");
scanf("%d",&n);
printf("\nEnter the knapsack capacity:");
scanf("%d",&m);
printf("\nEnter profit followed by weight:\n");
for(i=1;i<=n;i++)
scanf("%d %d",&p[i],&w[i]);
max_profit=knap(1,m);
printf("\nMax profit=%d",max_profit);
return 0;}

-----------------------------------7---------------------------------

#include &lt;stdio.h&gt;
#define MAX 50
int p[MAX], w[MAX], x[MAX];
double maxprofit;
int n, m, i;
void greedyKnapsack(int n, int w[], int p[], int m) {
double ratio[MAX];
for (i = 0; i &lt; n; i++) {
ratio[i] = (double)p[i] / w[i];}
for (i = 0; i &lt; n - 1; i++) {
for (int j = i + 1; j &lt; n; j++) {
if (ratio[i] &lt; ratio[j]) {
double temp = ratio[i];
ratio[i] = ratio[j];
ratio[j] = temp;
int temp2 = w[i];
w[i] = w[j];
w[j] = temp2;
temp2 = p[i];
p[i] = p[j];
p[j] = temp2;}}}
int currentWeight = 0;
maxprofit = 0.0;
for (i = 0; i &lt; n; i++) {
if (currentWeight + w[i] &lt;= m) {
x[i] = 1; // Item i is selected
currentWeight += w[i];
maxprofit += p[i];
} else {
x[i] = (m - currentWeight) / (double)w[i];
maxprofit += x[i] * p[i];
break;}}
printf(&quot;Optimal solution for greedy method: %.1f\n&quot;, maxprofit);
printf(&quot;Solution vector for greedy method: &quot;);
for (i = 0; i &lt; n; i++)
printf(&quot;%d\t&quot;, x[i]);}
int main() {
printf(&quot;Enter the number of objects: &quot;);
scanf(&quot;%d&quot;, &amp;n);
printf(&quot;Enter the objects&#39; weights: &quot;);
for (i = 0; i &lt; n; i++)
scanf(&quot;%d&quot;, &amp;w[i]);
printf(&quot;Enter the objects&#39; profits: &quot;);
for (i = 0; i &lt; n; i++)
scanf(&quot;%d&quot;, &amp;p[i]);
printf(&quot;Enter the maximum capacity: &quot;);
scanf(&quot;%d&quot;, &amp;m);
greedyKnapsack(n, w, p, m);
return 0;}

---------------------------------8--------------------------------------

#include<stdio.h>
int subset(int n,int d,int values[]);
int main(){
int n,d,i,values[10];
printf("Enter the number of elements : "); scanf("%d",&n);
printf("Enter the values of the elements (in ascending order) : n"); for(i=1;i<=n;i++)
scanf("%d",&values[i]); printf("Enter the sum value : "); scanf("%d",&d);
printf("n");
if (!subset(n,d,values))
printf("\nThe problem instance doesnt have any solution.\n");
else
printf("\nnThe above-mentioned sets are the required solution to the given instance.\n");
return 0;}
int subset(int n,int d,int values[]){
int sum,k,i,included[10]; static int foundSoln = 0; static int count = 0; for(i=1;i<=n;i++)
included[i] = 0;
sum = 0;
k = 1;
included[k] = 1; while(1){
if(k <= n && included[k] == 1){
if(sum + values[k] == d){
foundSoln = 1;
++count;
printf("SOLUTION #%d IS \n{ ", count); for(i=1;i<=n;i++){
if(included[i] == 1)
printf("%d ",values[i]);}
printf(" }nn"); included[k] = 0;}
else if(sum + values[k] < d) sum += values[k];}
else{
else
k--;
included[k] = 0;
while(k>0 && included[k] == 0){
k--;}
if(k == 0)
break; included[k] = 0;
sum = sum - values[k];}
k = k+1; included[k] = 1;}
return foundSoln;}

--------------------------------9----------------------------------

#include <stdio.h> #include <stdlib.h> #include <sys/time.h> #include <time.h>
void fnGenRandInput(int [], int); void fnDispArray( int [], int); void fnSelectionSort(int
[], int);
int main( int argc, char **argv){
FILE *fp;
struct timeval tv; double dStart,dEnd;
int iaArr[500000],iNum,i,iChoice;
for(;;){
printf("\n 1.Plot the Graph\n 2.Selection Sort\n 3.Exit"); printf("\n Enter your choice\n");
scanf("%d",&iChoice);
switch(iChoice){
case 1:
fp = fopen("SelectionPlot.dat","w");
for(i=100;i<20000;i+=100){
fnGenRandInput(iaArr,i);
gettimeofday(&tv,NULL);
dStart = tv.tv_sec + (tv.tv_usec/1000000.0);
fnSelectionSort(iaArr,i);
gettimeofday(&tv,NULL);
dEnd = tv.tv_sec + (tv.tv_usec/1000000.0);
fprintf(fp,"%d\t%lf\n",i,dEnd-dStart);}
fclose(fp);
printf("\nData File generated and stored in file < SelectionPlot.dat >\n Use a plotting
utility\n"); break;
case 2:
printf("\nEnter the number of elements to sort\n"); scanf("%d",&iNum);
printf("\nUnsorted Array\n"); fnGenRandInput(iaArr,iNum); fnDispArray(iaArr,iNum);
fnSelectionSort(iaArr,iNum); printf("\nSorted Array\n"); fnDispArray(iaArr,iNum);
break;
case 3:
exit(0);}}
return 0;}
void fnGenRandInput(int X[], int n){
int i;
srand(time(NULL)); for(i=0;i<n;i++){
X[i] = rand()%10000;}}
void fnDispArray( int X[], int n){
int i;
for(i=0;i<n;i++)
printf(" %5d \n",X[i]);}
void fnSelectionSort(int X[], int n){
int i,j,iTemp,iMin; for(i=0;i<n;i++){
iMin = i;
for(j = i+1;j<n;j++){
if(X[j] < X[iMin])
iMin = j;}
iTemp = X[i]; X[i] = X[iMin]; X[iMin] = iTemp;}}
Selectionsort.gpl
set terminal png font arial
set title "Time Complexity for Selection Sort" set autoscale
set xlabel "Size of Input"
set ylabel "Sorting Time (microseconds)" set grid
set output "SelectionPlot.png"
plot "SelectionPlot.dat" t 'Selection Sort' with lines

----------------------------10---------------------------------

#include <stdio.h> #include <stdlib.h>
#include <sys/time.h> #include <time.h>
void fnGenRandInput(int [], int); void fnDispArray( int [], int);
int fnPartition(int [], int , int); void fnQuickSort(int [], int , int); void fnSwap(int*, int*);
void fnSwap(int *a, int *b){
int t = *a; *a = *b; *b = t;}
int main( int argc, char **argv){
FILE *fp;
struct timeval tv; double dStart,dEnd;
int iaArr[500000],iNum,i,iChoice;
for(;;){
printf("\n1.Plot the Graph\n2.QuickSort\n3.Exit"); printf("\nEnter your choice\n");
scanf("%d",&iChoice); switch(iChoice){
case 1:
fp = fopen("QuickPlot.dat","w");
for(i=100;i<100000;i+=100){
fnGenRandInput(iaArr,i); gettimeofday(&tv,NULL);
dStart = tv.tv_sec + (tv.tv_usec/1000000.0); fnQuickSort(iaArr,0,i-1);
gettimeofday(&tv,NULL);
dEnd = tv.tv_sec + (tv.tv_usec/1000000.0); fprintf(fp,"%d\t%lf\n",i,dEnd-dStart);}
fclose(fp);
printf("\nData File generated and stored in file < QuickPlot.dat >.\n Use a plotting
utility\n"); break;
case 2:
printf("\nEnter the number of elements to sort\n"); scanf("%d",&iNum);
printf("\nUnsorted Array\n"); fnGenRandInput(iaArr,iNum); fnDispArray(iaArr,iNum);
fnQuickSort(iaArr,0,iNum-1); printf("\nSorted Array\n"); fnDispArray(iaArr,iNum);
break;
case 3:
exit(0);}}
return 0;}
int fnPartition(int a[], int l, int r){
int i,j; int p;
p = a[l];
i = l;
j = r+1; do{
do { i++; } while (a[i] < p);
do { j--; } while (a[j] > p);
fnSwap(&a[i], &a[j]);
}while (i<j);
fnSwap(&a[i], &a[j]);
fnSwap(&a[l], &a[j]); return j;}
void fnQuickSort(int a[], int l, int r){
int s;
if (l < r){
s = fnPartition(a, l, r); fnQuickSort(a, l, s-1); fnQuickSort(a, s+1, r);}}
void fnGenRandInput(int X[], int n){
srand(time(NULL)); for(int i=0;i<n;i++){
X[i] = rand()%10000;}}
void fnDispArray( int X[], int n){
for(int i=0;i<n;i++)
printf(" %5d \n",X[i]);}
Quicksort.gpl
set terminal png font arial
set title "Time Complexity for Quick Sort" set autoscale
set xlabel "Size of Input"
set ylabel "Sorting Time (microseconds)" set grid
set output "QuickPlot.png"
plot "QuickPlot.dat" t 'Quick Sort' with lines

-------------------------------11--------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <time.h>
void fnGenRandInput(int [], int);
void fnDispArray( int [], int);
void fnMerge(int [], int ,int ,int);
void fnMergeSort(int [], int , int);
int main( int argc, char **argv){
FILE *fp;
struct timeval tv;
double dStart,dEnd;
int iaArr[500000],iNum,i,iChoice;
for(;;){
printf("\n1.Plot the Graph\n2.MergeSort\n3.Exit");
printf("\nEnter your choice\n"); scanf("%d",&iChoice);
switch(iChoice){
case 1:
fp = fopen("MergePlot.dat","w");
for(i=100;i<100000;i+=100){
fnGenRandInput(iaArr,i);
gettimeofday(&tv,NULL);
dStart = tv.tv_sec + (tv.tv_usec/1000000.0);
fnMergeSort(iaArr,0,i-1);
gettimeofday(&tv,NULL);
dEnd = tv.tv_sec + (tv.tv_usec/1000000.0);
fprintf(fp,"%d\t%lf\n",i,dEnd-dStart);}
fclose(fp);
printf("\nData File generated and stored in file < MergePlot.dat >.\n Use a plotting
utility\n"); break;
case 2:
printf("\nEnter the number of elements to sort\n"); scanf("%d",&iNum);
printf("\nUnsorted Array\n"); fnGenRandInput(iaArr,iNum); fnDispArray(iaArr,iNum);
fnMergeSort(iaArr,0,iNum-1); printf("\nSorted Array\n"); fnDispArray(iaArr,iNum);
break;
case 3:
exit(0);}}
return 0;}
void fnMerge(int a[], int low,int mid,int high){
int i,k,j,b[500000]; i=k=low;
j=mid+1;
while(i<=mid && j<=high){
if(a[i]<a[j])
b[k++]=a[i++];
else
b[k++]=a[j++];}
while(i<=mid)
b[k++]=a[i++];
while(j<=high)
b[k++]=a[j++];
for(i=low;i<k;i++) a[i]=b[i];}
void fnMergeSort(int a[],int low,int high){
int mid;
if(low<high){
mid=(low+high)/2; fnMergeSort(a,low,mid);
fnMergeSort(a,mid+1,high); fnMerge(a,low,mid,high);}}
void fnGenRandInput(int X[], int n){
int i;
srand(time(NULL)); for(i=0;i<n;i++){
X[i] = rand()%10000;}}
void fnDispArray( int X[], int n){
int i;
for(i=0;i<n;i++)
printf(" %5d \n",X[i]);}
Mergesort.gpl
set terminal png font arial
set title "Time Complexity for Merge Sort" set autoscale
set xlabel "Size of Input"
set ylabel "Sorting Time (microseconds)" set grid
set output "MergePlot.png"
plot "MergePlot.dat" t 'Merge Sort' with lines

--------------------------------12----------------------------------

#include<stdio.h>
//#include<conio.h>
#include<stdlib.h>
#define MAX 50
int can_place(int c[],int r){
int i;
for(i=0;i<r;i++)
if(c[i]==c[r] || (abs(c[i]-c[r])==abs(i-r)))
return 0;
return 1;}
void display(int c[],int n){
int i,j;
char cb[10][10];
for(i=0;i<n;i++)
for(j=0;j<n;j++)
cb[i][j]='-';
for(i=0;i<n;i++)
cb[i][c[i]]='Q';
for(i=0;i<n;i++){
for(j=0;j<n;j++)
printf("%c",cb[i][j]);
printf("\n");}}
void n_queens(int n){
int r;
int c[MAX];
c[0]=-1;
r=0;
while(r>=0)
{ c[r]++;
while(c[r]<n && !can_place(c,r))
c[r]++;
if(c[r]<n)
{ if(r==n-1)
{ display(c,n);
printf("\n\n");}
else
{ r++;
c[r]=-1;}}
else
r--;}}
void main(){
int n;
//clrscr();
printf("\nEnter the no. of queens:");
scanf("%d",&n);
n_queens(n);
// getch();
}

----------------------------------------------------------------------